---
import './article.sass'
import type { CollectionEntry } from 'astro:content'
import Base from './base.astro'
import Container from '@/components/container.astro'
import ArticleLicense from '@/components/article-license.astro'
import { getLangCode, getRoot, useLang, type LangCode } from '@/i18n'
import { ymdFormat, slugify } from '@/utils/server'

import icon_time from '@/assets/icons/time.svg'
import icon_update from '@/assets/icons/update.svg'
import icon_tags from '@/assets/icons/tags.svg'
import icon_back_to_top from '@/assets/icons/back-to-top.svg'
import icon_back_to_top_mobile from '@/assets/icons/back-to-top--mobile.svg'
import TableOfContents from '@/components/table-of-contents.astro'

interface Props {
  entry: CollectionEntry<'posts'>
}

const { entry } = Astro.props
const { data, render } = entry

const title = data.title
const date = data.date
const update = data.update ?? data.date
const tags = data.tags ?? []
const summary = data.summary

const code = getLangCode(Astro.url)
const root = getRoot(code)
const t = useLang(code)

const GiscusLangs: Record<LangCode, string> = {
  zh: 'zh-CN',
  en: 'en',
  ja: 'ja',
}

const { Content, headings } = await render()
---

<Base title={`${title} | i'D Blog`}>
  <div id="top-of-article"></div>

  <Container>
    <div class="article__container">
      <div>
        <article>
          <h1 class="article__title">{title}</h1>
          {summary && <p class="article__summary">{summary.trim()}</p>}
          <hr class="article__divider" />

          <Content />
        </article>

        <script
          src="https://giscus.app/client.js"
          data-repo="idlist/id-blog-comments"
          data-repo-id="R_kgDOKQ5wOA"
          data-category="Comments"
          data-category-id="DIC_kwDOKQ5wOM4CZK-7"
          data-mapping="pathname"
          data-strict="0"
          data-reactions-enabled="1"
          data-emit-metadata="0"
          data-input-position="top"
          data-theme="light"
          data-lang={GiscusLangs[code]}
          data-loading="lazy"
          crossorigin="anonymous"
          async>
        </script>
      </div>

      <div class="article__aside">
        <div class="article__sticky">
          <div class="article-item">
            <img class="article-item__icon" src={icon_time.src} alt="date" />
            <time datetime={date.toUTCString()}>{ymdFormat(date)}</time>
          </div>

          <div class="article-item">
            <img class="article-item__icon" src={icon_update.src} alt="update" />
            <time datetime={update.toUTCString()}>{ymdFormat(update)}</time>
          </div>

          <div class="article-tags">
            <img class="article-tags__icon" src={icon_tags.src} alt="tags" />
            {
              tags.length ? (
                tags.map((tag) => (
                  <a class="article-tags__name" href={`${root}tags/${slugify(tag)}`}>
                    {tag}
                  </a>
                ))
              ) : (
                <div class="article-tags__no-tags">{t('ui.no-tags')}</div>
              )
            }
          </div>

          <ArticleLicense />

          <TableOfContents headings={headings} />

          <a class="article-back" href="#top-of-article">
            <img class="article-back__icon" src={icon_back_to_top.src} alt="back to top" />
            <span>{t('ui.back-to-top')}</span>
          </a>
        </div>
      </div>
    </div>

    <a class="article-back--mobile" href="#top-of-article">
      <img class="article-back--mobile-icon" src={icon_back_to_top_mobile.src} alt="back to top" />
    </a>
  </Container>
</Base>

<script>
  const BtnBackToTop = document.querySelector('.article-back') as HTMLLinkElement
  const BtnBackToTopMobile = document.querySelector('.article-back--mobile') as HTMLLinkElement

  const backToTop = (e: MouseEvent) => {
    e.preventDefault()
    scrollTo({ top: 0 })
  }

  BtnBackToTop.addEventListener('click', backToTop)
  BtnBackToTopMobile.addEventListener('click', backToTop)

  const AllCodeBlocks = document.querySelectorAll('article .code-wrapper')

  for (const CodeBlock of AllCodeBlocks) {
    const CopyBtn = CodeBlock.querySelector('.code-copy') as HTMLLinkElement
    const Code = CodeBlock.getElementsByTagName('pre')[0] as HTMLPreElement
    const Message = CodeBlock.querySelector('.code-copy__success') as HTMLElement

    CopyBtn.addEventListener('click', () => {
      navigator.clipboard.writeText(Code.innerText)
      Message.classList.remove('hidden')
      setTimeout(() => {
        Message.classList.add('hidden')
      }, 1000)
    })
  }
</script>