---
import { render, type CollectionEntry } from 'astro:content'
import Base from './base.astro'
import { getLangCode, getRoot, useLang, langTags } from '@/i18n'
import { ymdFormat, tagify } from '@/utils/server'
import countWord from '@/utils/word-count'
import './article.scss'

import PageContainer from '@/components/page-container.astro'
import ArticleLicense from '@/components/article-license.astro'
import TableOfContents from '@/components/table-of-contents.astro'
import LastUpdate from '@/components/last-update.astro'
import CodeCopiable from '@/elements/code-copiable.astro'

import icon_Share from '@/assets/icons/share.svg'
import icon_Text from '@/assets/icons/text.svg'
import icon_Time from '@/assets/icons/time.svg'
import icon_Update from '@/assets/icons/update.svg'
import icon_Tags from '@/assets/icons/tags.svg'
import icon_BackToTop from '@/assets/icons/back-to-top.svg'
import icon_BackToTopMobile from '@/assets/icons/back-to-top--mobile.svg'
import icon_Star from '@/assets/icons/star.svg'

interface Props {
  entry: CollectionEntry<'posts'>
}

const { entry } = Astro.props
const { data, body } = entry

const title = data.title
const words = countWord(body)
const date = data.date
const update = data.update ?? data.date
const tags = data.tags ?? []
const summary = data.summary

const code = getLangCode(Astro.url)
const root = getRoot(code)
const t = useLang(code)

// Disable Giscus in development environment for better writing experience.
const shouldLoadGiscus = import.meta.env.PROD

const { Content, headings } = await render(entry)
---

<Base title={`${title} | i'D Blog`}>
  <div id="top-of-article"></div>

  <PageContainer>
    <div class="article__container">
      <div>
        <article>
          <h1 class="article__title">{title}</h1>
          {summary && <p class="article__summary">{summary.trim()}</p>}
          <hr class="article__divider" />

          <Content components={{ pre: CodeCopiable }} />
        </article>

        {
          shouldLoadGiscus && (
            <>
              <div class="giscus-blank" />

              <script
                is:inline
                src="https://giscus.app/client.js"
                data-repo="idlist/id-blog-comments"
                data-repo-id="R_kgDOKQ5wOA"
                data-category="Comments"
                data-category-id="DIC_kwDOKQ5wOM4CZK-7"
                data-mapping="pathname"
                data-strict="0"
                data-reactions-enabled="1"
                data-emit-metadata="0"
                data-input-position="top"
                data-theme="light"
                data-lang={langTags[code]}
                data-loading="lazy"
                crossorigin="anonymous"
                async
              />
            </>
          )
        }

        <div class="last-update--mobile">
          <LastUpdate />
        </div>
      </div>

      <div class="article__aside">
        <div class="article__sticky">
          <a class="article-info link-sub article-share" data-title={title}>
            <img class="icon-md article-share__icon" src={icon_Share.src} alt="share" />
            <span>{t('ui.share-article')}</span>
            <div class="article-share__popup hidden">{t('ui.share-article-succeed')}</div>
          </a>

          <div class="article-info">
            <img class="icon-md" src={icon_Text.src} alt="word count" />
            <span>{t('ui.word-count', words)}</span>
          </div>

          <div class="article-info">
            <img class="icon-md" src={icon_Time.src} alt="date" />
            <time datetime={date.toUTCString()}>{ymdFormat(date)}</time>
          </div>

          {
            data.update && (
              <div class="article-info">
                <img class="icon-md" src={icon_Update.src} alt="update" />
                <time datetime={update.toUTCString()}>{ymdFormat(update)}</time>
              </div>
            )
          }

          <div class="article-info article-tags">
            <img class="icon-md" src={icon_Tags.src} alt="tags" />
            {
              tags.length ? (
                tags.map((tag) => (
                  <a class="link-sub article-tags__name" href={`${root}tags/${tagify(tag)}`}>
                    {tag}
                  </a>
                ))
              ) : (
                <div class="article-tags__no-tags">{t('ui.no-tags')}</div>
              )
            }
          </div>

          <ArticleLicense />

          <TableOfContents headings={headings} />

          <a class="article-info link-sub article-back" href="#top-of-article">
            <img class="icon-md" src={icon_BackToTop.src} alt="back to top" />
            <span>{t('ui.back-to-top')}</span>
          </a>

          <div class="last-update--desktop">
            <LastUpdate />
          </div>

          <div class="article-star">
            <img class="icon-lg" src={icon_Star.src} alt="star" />
          </div>
        </div>
      </div>
    </div>

    <a class="btn-corner article-back--mobile" href="#top-of-article">
      <img class="icon-lg" src={icon_BackToTopMobile.src} alt="back to top" />
    </a>
  </PageContainer>

  <div class="article__mobile-blank"></div>
</Base>

<script>
  // Share button.

  const ShareButton = document.querySelector('.article-share') as HTMLLinkElement
  const title = ShareButton.dataset.title
  const SharePopup = ShareButton.querySelector('.article-share__popup') as HTMLDivElement

  ShareButton.addEventListener('click', (e) => {
    e.preventDefault()

    const url = location.origin + location.pathname
    navigator.clipboard.writeText(`${title} | i'D Blog - ${url}`)

    SharePopup.classList.remove('hidden')
    setTimeout(() => {
      SharePopup.classList.add('hidden')
    }, 1000)
  })

  // "Back to top" buttons.

  const BtnBackToTop = document.querySelector('.article-back') as HTMLLinkElement
  const BtnBackToTopMobile = document.querySelector('.article-back--mobile') as HTMLLinkElement

  const backToTop = (e: MouseEvent) => {
    e.preventDefault()
    scrollTo({ top: 0 })
    history.pushState(null, '', location.origin + location.pathname)
  }

  BtnBackToTop.addEventListener('click', backToTop)
  BtnBackToTopMobile.addEventListener('click', backToTop)

  // Copy code buttons.

  const AllCodeBlocks = document.querySelectorAll('article .code-wrapper')

  for (const CodeBlock of AllCodeBlocks) {
    const CopyBtn = CodeBlock.querySelector('.code-copy') as HTMLLinkElement
    const Code = CodeBlock.getElementsByTagName('pre')[0] as HTMLPreElement
    const Message = CodeBlock.querySelector('.code-copy__success') as HTMLElement

    CopyBtn.addEventListener('click', () => {
      navigator.clipboard.writeText(Code.innerText)

      Message.classList.remove('hidden')
      setTimeout(() => {
        Message.classList.add('hidden')
      }, 1000)
    })
  }
</script>
