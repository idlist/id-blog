---
import type { GetStaticPaths, InferGetStaticPropsType as InferProps } from 'astro'
import { getCollection } from 'astro:content'
import { range } from 'lodash-es'
import Homepage from '@/layout/homepage.astro'
import type { Posts } from '@/content/config'
import { lang, defaultLang, undef } from '@/i18n'
import { createPaging, pageSize, paginate } from '@/utils/server'

export const getStaticPaths = (async () => {
  const posts = await getCollection('posts')
  const postsByLang = new Map<string, Posts>()

  Object.keys(lang).map((code) => {
    postsByLang.set(code, [])
  })

  posts.map((post) => {
    const code = post.data.lang ?? defaultLang
    const collection = postsByLang.get(code)
    collection?.push(post)
  })

  postsByLang.forEach((posts) => {
    posts.sort((a, b) => {
      return a.data.date < b.data.date ? 1 : -1
    })
  })

  return Array.from(postsByLang, ([code, posts]) => {
    const total = posts.length
    const count = total === 0 ? 1 : Math.ceil(total / pageSize)

    return range(count).map((idx) => {
      const page = idx + 1

      return {
        params: {
          lang: undef(code, defaultLang),
          page: undef(page, 1, `posts/${page}`),
        },
        props: {
          posts: paginate(posts, page),
          total,
          page: createPaging(page, count),
        },
      }
    })
  }).flat()
}) satisfies GetStaticPaths

type Props = InferProps<typeof getStaticPaths>

const { posts, total, page } = Astro.props
---

<Homepage posts={posts} total={total} page={page} />
