---
import type { GetStaticPaths, InferGetStaticPropsType as InferProps } from 'astro'
import { getCollection, type CollectionEntry } from 'astro:content'
import Homepage from '@/layout/homepage.astro'
import { lang, defaultLang, undef, type LangCode } from '@/i18n'
import { range } from '@/utils'

export const getStaticPaths = (async () => {
  const pageSize = 10

  const posts = await getCollection('posts')
  const postsByLang: Record<string, CollectionEntry<'posts'>[]> = {}

  Object.keys(lang).map((code) => {
    postsByLang[code] = []
  })

  posts.map((post) => {
    const code = post.data.lang ?? defaultLang
    if (!postsByLang[code]) {
      postsByLang[code] = []
    }
    postsByLang[code].push(post)
  })

  const langPages: Record<string, number> = {}

  Object.keys(postsByLang).forEach((code) => {
    postsByLang[code].sort((a, b) => {
      return a.data.date < b.data.date ? 1 : -1
    })
    const count = postsByLang[code].length
    langPages[code] = count === 0 ? 1 : Math.ceil(count / pageSize)
  })

  const paginate = <T,>(collection: T[], page: number) => {
    return collection.slice((page - 1) * pageSize, page * pageSize)
  }

  return Object.entries(langPages).flatMap(([code, iter]) => {
    return range(iter).map((page) => {
      return {
        params: {
          lang: undef(code, defaultLang),
          page: undef(page, 1, `posts/${page}`),
        },
        props: {
          code: code as LangCode,
          posts: paginate(postsByLang[code], page),
          total: postsByLang[code].length,
          page,
        },
      }
    })
  })
}) satisfies GetStaticPaths

type Props = InferProps<typeof getStaticPaths>

const { code, posts, total, page } = Astro.props
---

<Homepage {code} {posts} {total} {page} />
