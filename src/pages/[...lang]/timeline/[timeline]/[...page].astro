---
import type { GetStaticPaths, InferGetStaticPropsType as InferProps } from 'astro'
import { getCollection } from 'astro:content'
import { range } from 'lodash-es'
import Category from '@/layout/category.astro'
import type { Posts } from '@/content/config'
import { defaultLang, undef } from '@/i18n'
import { createPaging, pageSize, paginate, ymKey, ymd } from '@/utils/server'
import SlowMap from '@/utils/slow-map'

export const getStaticPaths = (async () => {
  const posts = await getCollection('posts')

  interface GroupBy {
    code: string
    year: number
  }

  const postsByTime = new SlowMap<GroupBy, Posts>()

  posts.map((post) => {
    const code = post.data.lang ?? defaultLang
    const date = ymd(post.data.date)
    const year = date.year

    const key = { code, year }
    postsByTime.emplace(key, [post], (col) => col.push(post))
  })

  postsByTime.forEach((posts) => {
    posts.sort((a, b) => {
      return a.data.date < b.data.date ? 1 : -1
    })
  })

  return postsByTime.entries().flatMap(([key, posts]) => {
    const total = posts.length
    const count = Math.ceil(total / pageSize)

    return range(count).map((idx) => {
      const page = idx + 1

      return {
        params: {
          lang: undef(key.code, defaultLang),
          page: undef(page, 1),
          timeline: key.year.toString(),
        },
        props: {
          timeline: key.year.toString(),
          posts: paginate(posts, page),
          total,
          page: createPaging(page, count),
        },
      }
    })
  })
}) satisfies GetStaticPaths

type Props = InferProps<typeof getStaticPaths>

const { timeline, posts, total, page } = Astro.props
---

<Category type="timeline" value={timeline} posts={posts} total={total} page={page} />
